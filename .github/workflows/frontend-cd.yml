name: frontend CD Workflow
env:
      AWS_REGION: "us-east-1"

on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the workflow on'
        required: true
        default: 'main'
        type: string

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkingout code
        uses: actions/checkout@v3

      - name: Setting up Node js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Installing the  dependencies
        run: |
          cd starter/frontend
          npm ci

      - name: Running the lint
        run: |
          cd starter/frontend
          npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checking out code
        uses: actions/checkout@v3

      - name: Setting up the Node js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Installing the dependencies
        run: |
          cd starter/frontend 
          npm install

      - name: Running the tests
        run: |
          cd starter/frontend 
          npm test
  
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checking out code
        uses: actions/checkout@v3

      - name: Setting up the Docker Build
        uses: docker/setup-buildx-action@v2

      - name: AWS credentials configuration
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${AWS_REGION}

      - name: Log in to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        env:
          REACT_APP_MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
        run: |
          cd starter/frontend
          REPOSITORY_URI=${{ secrets.ECR_REPO_URI_FRONTEND }}
          GIT_SHA=${{ github.sha }}
          TAGGED_IMAGE="${REPOSITORY_URI}:${GIT_SHA}"
          docker build \
          --build-arg=REACT_APP_MOVIE_API_URL="$REACT_APP_MOVIE_API_URL/" \
          -t $TAGGED_IMAGE \
          .
      
      - name: Push Docker image to ECR
        run: |
          REPOSITORY_URI=${{ secrets.ECR_REPO_URI_FRONTEND }}
          GIT_SHA=${{ github.sha }}
          TAGGED_IMAGE="${REPOSITORY_URI}:${GIT_SHA}"
          docker push $TAGGED_IMAGE
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checking out code
        uses: actions/checkout@v3
 
      - name: Configuring the kubectl config file
        run: |
          aws eks --region us-east-1 update-kubeconfig --name cluster
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${AWS_REGION}
      
      - name: Deploy to Kubernetes
        run: |
          cd starter/frontend/k8s 
          GIT_SHA=${{ github.sha }}
          REPOSITORY_URI=${{ secrets.ECR_REPO_URI_FRONTEND }}
          TAGGED_IMAGE="${REPOSITORY_URI}:${GIT_SHA}"
          kustomize edit set image frontend=${TAGGED_IMAGE}
          kustomize build | kubectl apply -f - --validate=false
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${AWS_REGION}